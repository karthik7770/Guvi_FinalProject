import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.FlowStepBuilder;
import org.springframework.batch.core.step.builder.JobStepBuilder;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.job.JobStep;
import org.springframework.batch.core.step.job.SimpleJobStep;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
public class JobConfig {

    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;
    private final JobLauncher jobLauncher;
    private final Job jobA;
    private final Job jobC;
    private final Job jobD;

    public JobConfig(JobBuilderFactory jobBuilderFactory, StepBuilderFactory stepBuilderFactory,
                     JobLauncher jobLauncher, Job jobA, Job jobC, Job jobD) {
        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
        this.jobLauncher = jobLauncher;
        this.jobA = jobA;
        this.jobC = jobC;
        this.jobD = jobD;
    }

    @Bean
    public Job mainJob(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        return jobBuilderFactory.get("mainJob")
            .start(jobStep(jobA, jobRepository, transactionManager))
            .next(jobStep(jobC, jobRepository, transactionManager))
            .next(jobStep(jobD, jobRepository, transactionManager))
            .build();
    }

    private Step jobStep(Job job, JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        return new JobStepBuilder(new StepBuilder("stepFor" + job.getName(), jobRepository))
            .job(job)
            .launcher(jobLauncher)
            .repository(jobRepository)
            .transactionManager(transactionManager)
            .build();
    }
}
