@Bean
public Job jobA(JobBuilderFactory jobBuilderFactory, Step step1) {
    return jobBuilderFactory.get("jobA")
                            .start(step1)
                            .build();
}

@Bean
public Job jobC(JobBuilderFactory jobBuilderFactory, Step step2) {
    return jobBuilderFactory.get("jobC")
                            .start(step2)
                            .build();
}

@Bean
public Job jobE(JobBuilderFactory jobBuilderFactory, Step step3) {
    return jobBuilderFactory.get("jobE")
                            .start(step3)
                            .build();
}

@Bean
public Job jobF(JobBuilderFactory jobBuilderFactory, Step step4) {
    return jobBuilderFactory.get("jobF")
                            .start(step4)
                            .build();
}


@Bean
public TaskExecutor taskExecutor() {
    ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
    taskExecutor.setCorePoolSize(10); // Adjust based on your needs
    taskExecutor.setMaxPoolSize(20);  // Adjust based on your needs
    taskExecutor.setQueueCapacity(50);
    taskExecutor.initialize();
    return taskExecutor;
}



@Bean
public Job jobFlow(JobBuilderFactory jobBuilderFactory, 
                   JobCompletionDecider decider, 
                   Job jobA, 
                   Job jobC, 
                   Job jobE, 
                   Job jobF) {
    return jobBuilderFactory.get("jobFlow")
                            .start(parallelFlow())
                            .next(decider)
                            .on("COMPLETED").to(jobE())
                            .next(jobF())
                            .end()
                            .build();
}

@Bean
public Flow parallelFlow() {
    return new FlowBuilder<Flow>("parallelFlow")
            .start(jobAFlow())
            .split(taskExecutor())
            .add(jobCFlow())
            .build();
}

@Bean
public Flow jobAFlow() {
    return new FlowBuilder<Flow>("jobAFlow")
            .start(new JobStepBuilder(new StepBuilder("jobAStep"))
                    .job(jobA)
                    .launcher(jobLauncher())
                    .repository(jobRepository())
                    .build())
            .build();
}

@Bean
public Flow jobCFlow() {
    return new FlowBuilder<Flow>("jobCFlow")
            .start(new JobStepBuilder(new StepBuilder("jobCStep"))
                    .job(jobC)
                    .launcher(jobLauncher())
                    .repository(jobRepository())
                    .build())
            .build();
}

@Bean
public Flow jobE() {
    return new FlowBuilder<Flow>("jobE")
            .start(new JobStepBuilder(new StepBuilder("jobEStep"))
                    .job(jobE)
                    .launcher(jobLauncher())
                    .repository(jobRepository())
                    .build())
            .build();
}

@Bean
public Flow jobF() {
    return new FlowBuilder<Flow>("jobF")
            .start(new JobStepBuilder(new StepBuilder("jobFStep"))
                    .job(jobF)
                    .launcher(jobLauncher())
                    .repository(jobRepository())
                    .build())
            .build();
}


@Bean
public JobLauncher jobLauncher() {
    SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
    jobLauncher.setJobRepository(jobRepository());
    jobLauncher.setTaskExecutor(taskExecutor());
    return jobLauncher;
}
