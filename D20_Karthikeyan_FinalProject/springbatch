public class GroupedRecordItemReader implements ItemReader<GroupedRecord> {
    private final JdbcTemplate jdbcTemplate;
    private List<GroupedRecord> groupedRecords;
    private int nextIndex;

    public GroupedRecordItemReader(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.nextIndex = 0;
    }

    @Override
    public GroupedRecord read() {
        if (groupedRecords == null) {
            groupedRecords = fetchGroupedRecords();
        }
        if (nextIndex < groupedRecords.size()) {
            return groupedRecords.get(nextIndex++);
        }
        return null; // end of reading
    }

    private List<GroupedRecord> fetchGroupedRecords() {
        List<Record> records = jdbcTemplate.query("SELECT * FROM your_table ORDER BY recId", new RecordRowMapper());
        Map<String, GroupedRecord> groupedRecordMap = new LinkedHashMap<>();
        for (Record record : records) {
            groupedRecordMap
                .computeIfAbsent(record.getRecId(), k -> new GroupedRecord(k, new ArrayList<>()))
                .getRecords()
                .add(record);
        }
        return new ArrayList<>(groupedRecordMap.values());
    }
}
public class GroupedRecord {
    private String recId;
    private List<Record> records;
//org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
    // getters and setters
//org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT JOB_INSTANCE_ID, JOB_NAME
//FROM BATCH_JOB_INSTANCE
//WHERE JOB_NAME = ?
// and JOB_KEY = ?]
}
